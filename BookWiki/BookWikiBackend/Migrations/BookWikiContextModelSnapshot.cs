// <auto-generated />
using System;
using BookWiki.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BookWiki.Migrations
{
    [DbContext(typeof(BookWikiContext))]
    partial class BookWikiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BookWiki.Entity.Models.CategoryRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("InsertedBy")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BookWiki.Entity.Models.TagRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("InsertedBy")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TagName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(60)
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("BookWiki.Entity.Models.WikiEntryRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntryName")
                        .HasColumnType("text");

                    b.Property<string>("InsertedBy")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WikiEntry");
                });

            modelBuilder.Entity("BookWiki.Entity.Models.WikiEntrySubheadingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EntryId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntryText")
                        .HasColumnType("text");

                    b.Property<string>("InsertedBy")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubheadingName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("WikiEntrySubheading");
                });

            modelBuilder.Entity("BookWiki.Entity.Models.WikiEntryTagRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EntryId")
                        .HasColumnType("uuid");

                    b.Property<string>("InsertedBy")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.HasIndex("TagId");

                    b.ToTable("WikiEntryTag");
                });

            modelBuilder.Entity("BookWiki.Entity.Models.CategoryRecord", b =>
                {
                    b.HasOne("BookWiki.Entity.Models.TagRecord", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BookWiki.Entity.Models.WikiEntryRecord", b =>
                {
                    b.HasOne("BookWiki.Entity.Models.CategoryRecord", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookWiki.Entity.Models.WikiEntrySubheadingRecord", b =>
                {
                    b.HasOne("BookWiki.Entity.Models.WikiEntryRecord", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("BookWiki.Entity.Models.WikiEntryTagRecord", b =>
                {
                    b.HasOne("BookWiki.Entity.Models.WikiEntryRecord", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId");

                    b.HasOne("BookWiki.Entity.Models.TagRecord", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Entry");

                    b.Navigation("Tag");
                });
#pragma warning restore 612, 618
        }
    }
}
